1º Passo:

- No momento de validar se o usuário foi autenticado com sucesso na rota (geralmente de login), devemos gerar esse JWT (Json-Web-Token) e guardá-lo em algum lugar.

Exemplo:


----------------------- validações de campo, e no banco de dados ------------------------

app.post('/auth/login', async (req,res) =>{

    //Recendo os dados nas variáveis
    const {email, password} = req.body
    //Validações de campo
    if(!email){
        return res.status(422).json({msg: 'O email é obrigatório.'})
    }

    if(!password){
        return res.status(422).json({msg: 'A senha é obrigatória.'})
    }

    //Check if user already exists.
    const user = await User.findOne({email: email})
    if(!user){
        return res.status(404).json({msg: 'Usuário não encontrado.'})
    }

    //check if password match
    const checkPassword = await bcrypt.compare(password, user.password)
    //Aqui fazemos a validação, transformando a variável em falsa, para caso a 'checkPassword' se encontre como 'false'
    //significa que o bcrypt comparou as duas senhas, e não são iguais.
    if(!checkPassword){
        return res.status(422).json({msg: 'Senha inválida.'})
    }

    ----------------------- validações de campo, e no banco de dados ------------------------
 //////////////////////////////////////////////////////////////////////////////////////////
    
    
    
    ----------------------- GERANDO O TOKEN ---------------------

    
    2º passo - Nesse momento, estamos pegando a SECRET que foi configurada no sistema, o ID do usuário que logou, geranado essa assinatura (token).

    //jwt.sign - Para ficar mais claro, estamos gerando uma assinatura atrelando o ID do user, com o SECRET da aplicação por motivos de segurança.

    try{
        const secret = process.env.SECRET
        const token = jwt.sign({id: user._id,},secret)

        res.status(200).json({msg: 'Autenticação realizada com sucesso.', token})
    }catch{
        console.log(error)
        res.status(500).json({msg: 'A autenticação falhou. Tente novamente.', error})
    }

})

    ----------------------- GERANDO O TOKEN ---------------------

    ----------------------- FAZENDO A VERIFICAÇÃO DO TOKEN NAS ROTAS ATRAVÉS DE MIDDLEWARE ------------------

    3º passo - Através de um middleware passado como argumento nas rotas, iremos verificar se o token está válido, ou inválido para podermos delimitar os acessos.

    here's the code bitch:

    - Na função checkToken, pegamos o campo de autorização pelo header usando o "req.headers" sim, com um array, e em seguida separamos usando o split do JS para pegar a segunda parte desse header (token), e jogando na variable "token".

    function checkToken(req,res,next){
    const authHeader = req.headers['authorization']
    const token = authHeader && authHeader.split(' ')[1]

    if (!token){
        //Status 401 - Acesso negado no sistema
        return res.status(401).json({msg: "Access denied."})
    }

    - Aqui fazemos a validação, se o token que está vindo do headers (que está na variável token), está atrelado ao secret da aplicação usand o jwt.verify passando como argumentos o SECRET e o Token. Pega a visão:

    
    try {
        const secret = process.env.SECRET
        jwt.verify(token, secret)
        
        - Se nesse momento, o verify der erro, o token está inválido, e tem algum espertinho tentando burlar a segurança,e então ele nem chama o next(), a requisição barra no middleware e retornamos um erro 400 para a requisição.
        next()
        
    } catch (error) {
        console.log(error)
        //Status 400 - Forbidden
        res.status(400).json({msg: 'Token inválido.'})
        
    }
}

     ----------------------- FAZENDO A VERIFICAÇÃO DO TOKEN NAS ROTAS ATRAVÉS DE MIDDLEWARE ------------------



